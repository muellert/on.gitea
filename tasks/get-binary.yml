---

# Conditionally download the gitea binary, the GPG signature and the
# SHA256 file. If the binary is already installed and the checksum
# matches, do nothing. Else, download the binary and check the GPG
# signature. If the signature is ok, install the binary.


- name: download the checksum file
  get_url:
      url: "{{ gitea_download_url | regex_replace('\\.[gx]z$') }}.sha256"
      dest: "{{ gitea_download_dir }}"
      mode: 0644
      backup: yes
  tags: download

- name: put the new checksum into a variable
  shell: "cat {{ gitea_download_dir }}/{{ gitea_uncompressed_binary }}.sha256 | cut -f1 -d ' '"   # noqa 301 306
  register: download_checksum
  tags: download

- name: check whether we have the file already
  become: yes
  stat:
      path: "{{ gitea_install_path }}/{{ gitea_binary }}"
      checksum_algorithm: sha256
  register: old_file_checksum
  tags: download

- name: conditionally download the binary and install it
  block:
    - name: transfer the gitea key
      copy:
          src: gitea.key
          dest: /tmp/gitea.key

    - name: get the gitea key
      command: "gpg --import /tmp/gitea.key"

    - name: download the compressed binary and gpg signature
      get_url:
          url: "{{ item }}"
          dest: "{{ gitea_download_dir }}"
          mode: 0644
          backup: yes
      with_items:
          - "{{ gitea_download_url }}"
          - "{{ gitea_download_url }}.asc"
      tags: download

    - name: check the gpg signature
      command: "gpg -q --verify {{ gitea_download_dir }}/{{ gitea_source_binary }}.asc {{ gitea_download_dir }}/{{ gitea_source_binary }}"
      register: gpg_signature_ok
      tags: download

    - name: uncompress the downloaded file
      command: "xz -fd {{ gitea_download_dir }}/{{ gitea_source_binary }}"
      tags: download

    - name: check whether a newly downloaded file is ok
      stat:
          path: "{{ gitea_download_dir }}/{{ gitea_uncompressed_binary }}"
          checksum_algorithm: sha256
      register: new_file_checksum
      tags: download

    - name: copy the binary from the download directory to the target directory
      become: yes
      copy:
        src: "{{ gitea_download_dir }}/{{ gitea_uncompressed_binary }}"
        dest: "{{ gitea_install_path }}/{{ gitea_binary }}"
        owner: root
        mode: 0755
        remote_src: yes
        backup: yes
      notify:
        - restart gitea
      tags: download

    - name: create a file to signal success
      become: yes
      file:
          path: "{{ gitea_install_path }}/{{ gitea_version }}.stamp"
          state: touch
          mode: 0644
      tags: download

  when: not old_file_checksum.stat.exists or old_file_checksum.stat.checksum != download_checksum.stdout
  tags: download
